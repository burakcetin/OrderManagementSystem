using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using ProductCatalog.Core.Commands.ReduceStock;
using ProductCatalog.Core.Commands.RevertStock;
using ProductCatalog.Core.Commands.UpdateProduct;
using ProductCatalog.Core.Models;
using ProductCatalog.Core.Queries.GetAllProducts;
using ProductCatalog.Core.Queries.GetProductById;
using SharedKernel.Api;
using SharedKernel.Wrappers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ProductCatalog.API.Controllers
{
    /// <summary>
    /// API endpoints for managing products
    /// </summary>
    [Route("api/[controller]")]
    public class ProductsController : ResponseController
    {
        private readonly IMediator _mediator;
        private readonly ILogger<ProductsController> _logger;

        /// <summary>
        /// Constructor
        /// </summary>
        public ProductsController(IMediator mediator, ILogger<ProductsController> logger)
        {
            _mediator = mediator;
            _logger = logger;
        }

        /// <summary>
        /// Get all products
        /// </summary>
        /// <param name="category">Optional category filter</param>
        /// <returns>List of all products</returns>
        /// <response code="200">Returns the list of products</response>
        /// <response code="500">If there was an internal server error</response>
        [HttpGet]
        [ProducesResponseType(typeof(Response<List<ProductDto>>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetAll([FromQuery] string category = null)
        {
            try
            {
                var query = new GetAllProductsQuery { Category = category };
                var products = await _mediator.Send(query);

                // Metadata bilgilerini ekle
                Dictionary<string, object> metadata = new Dictionary<string, object>
                {
                    { "TotalCount", products.Count },
                    { "Category", category ?? "All" }
                };

                return OkResponse(products, "Products retrieved successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving all products");
                return ServerErrorResponse();
            }
        }

        /// <summary>
        /// Get product by ID
        /// </summary>
        /// <param name="id">Product ID</param>
        /// <returns>Product details</returns>
        /// <response code="200">Returns the product</response>
        /// <response code="404">If product not found</response>
        /// <response code="500">If there was an internal server error</response>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(Response<ProductDto>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetById(Guid id)
        {
            try
            {
                var query = new GetProductByIdQuery { ProductId = id };
                var product = await _mediator.Send(query);
                
                if (product == null)
                    return NotFoundResponse($"Product with ID {id} not found");

                return OkResponse(product);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error retrieving product {id}");
                return ServerErrorResponse();
            }
        }

        /// <summary>
        /// Update product
        /// </summary>
        /// <param name="id">Product ID</param>
        /// <param name="command">Update product command</param>
        /// <returns>Result of the product update operation</returns>
        /// <response code="200">Returns the product update result</response>
        /// <response code="400">If validation fails</response>
        /// <response code="404">If product not found</response>
        /// <response code="500">If there was an internal server error</response>
        [HttpPut("{id}")]
        [ProducesResponseType(typeof(Response<UpdateProductCommandResult>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> UpdateProduct(Guid id, [FromBody] UpdateProductCommand command)
        {
            try
            {
                // Ensure the ID in route matches the command
                if (command.ProductId != id)
                {
                    command.ProductId = id;
                }
                
                _logger.LogInformation("Ürün güncelleme isteği alındı. ProductId: {ProductId}", command.ProductId);
                
                var response = await _mediator.Send(command);
                
                if (!response.Succeeded)
                {
                    if (response.Message?.Contains("bulunamadı") == true)
                    {
                        return NotFoundResponse(response.Message);
                    }
                    
                    return BadRequestResponse(response.Message);
                }
                
                return OkResponse(response.Data, "Ürün başarıyla güncellendi");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Ürün güncelleme işleminde hata. ProductId: {ProductId}", id);
                return ServerErrorResponse();
            }
        }
        
        /// <summary>
        /// Reduce product stock by quantity
        /// </summary>
        /// <param name="command">Reduce stock command</param>
        /// <returns>Result of the stock reduction operation</returns>
        /// <response code="200">Returns the stock reduction result</response>
        /// <response code="400">If validation fails</response>
        /// <response code="404">If product not found</response>
        /// <response code="500">If there was an internal server error</response>
        [HttpPost("reduce-stock")]
        [ProducesResponseType(typeof(Response<ReduceStockCommandResult>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> ReduceStock([FromBody] ReduceStockCommand command)
        {
            try
            {
                _logger.LogInformation("Stok düşme isteği alındı. ProductId: {ProductId}, Quantity: {Quantity}", 
                    command.ProductId, command.Quantity);
                
                var result = await _mediator.Send(command);
                
                if (!result.IsSuccess)
                {
                    if (result.ErrorMessage.Contains("bulunamadı"))
                    {
                        return NotFoundResponse(result.ErrorMessage);
                    }
                    
                    return BadRequestResponse(result.ErrorMessage);
                }
                
                return OkResponse(result, "Stok başarıyla düşüldü");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Stok düşme işleminde hata. ProductId: {ProductId}", command.ProductId);
                return ServerErrorResponse();
            }
        }
        
        /// <summary>
        /// Revert product stock by quantity
        /// </summary>
        /// <param name="command">Revert stock command</param>
        /// <returns>Result of the stock revert operation</returns>
        /// <response code="200">Returns the stock revert result</response>
        /// <response code="400">If validation fails</response>
        /// <response code="404">If product not found</response>
        /// <response code="500">If there was an internal server error</response>
        [HttpPost("revert-stock")]
        [ProducesResponseType(typeof(Response<RevertStockCommandResult>), StatusCodes.Status200OK)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status400BadRequest)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status404NotFound)]
        [ProducesResponseType(typeof(Response), StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> RevertStock([FromBody] RevertStockCommand command)
        {
            try
            {
                _logger.LogInformation("Stok geri ekleme isteği alındı. ProductId: {ProductId}, Quantity: {Quantity}", 
                    command.ProductId, command.Quantity);
                
                var result = await _mediator.Send(command);
                
                if (!result.IsSuccess)
                {
                    if (result.ErrorMessage.Contains("bulunamadı"))
                    {
                        return NotFoundResponse(result.ErrorMessage);
                    }
                    
                    return BadRequestResponse(result.ErrorMessage);
                }
                
                return OkResponse(result, "Stok başarıyla geri eklendi");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Stok geri ekleme işleminde hata. ProductId: {ProductId}", command.ProductId);
                return ServerErrorResponse();
            }
        }
    }
}
